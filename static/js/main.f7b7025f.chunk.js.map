{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","updateTasksTC","domainModel","dispatch","getState","tasks","find","t","then","res","type","updateTaskAC","data","item","Todolist","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","useEffect","setTasksAC","items","removeTodolist","map","style","paddingTop","Button","getTodolists","todolists","App","useSelector","state","removeTaskAC","removeTaskTC","addTaskTC","thunk","action","removeTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","createTodolistTC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todoListId","todolistTasks","newTasksArray","copyState","forEach","newtodolist","store","createStore","applyMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7b7025f.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e4310913-ee1d-4f45-afb2-bf32043c1264'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType<TodolistType>>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, setTodolistAC} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type UpdateTaskStatusActionType = {\r\n    type: 'UPDATE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateTaskDomaineModelType\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | UpdateTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            // let todolistTasks = state[action.todolistId];\r\n            // let newTasksArray = todolistTasks\r\n            //     .map(t => t.id === action.taskId ? {...action.task} : t);\r\n            //\r\n            // state[action.todolistId] = newTasksArray;\r\n            // return ({...state});\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOLISTS\" : {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateTaskDomaineModelType): UpdateTaskStatusActionType => {\r\n    return {type: 'UPDATE-TASK', model, todolistId, taskId}\r\n}\r\n// export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n//     return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n// }\r\n\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({type: 'SET-TASKS', todolistId, tasks}) as const\r\n\r\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\n// для примера написали санку на try/catch\r\n// export const removeTaskTC = (todolistId:string, taskId:string) => async (dispatch: Dispatch) => {\r\n//     try{\r\n//         const response = await todolistsAPI.deleteTask(todolistId, taskId)\r\n//      if    (response.data.resultCode === 0 ) {\r\n//          dispatch(removeTaskAC(taskId, todolistId))\r\n//      }\r\n//     } catch (e) {\r\n//         console.log(e)\r\n//     } finally {\r\n//\r\n//     }\r\n// }\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport type UpdateTaskDomaineModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTasksTC = (todolistId: string, taskId: string, domainModel: UpdateTaskDomaineModelType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    // выбрали метод find а не filter потому что нужно взять первый, а фильтр пойдет до конца массива\r\n    if (task) {\r\n        todolistsAPI.updateTask(todolistId, taskId, {\r\n            // title: task.title,\r\n            // status: task.status,\r\n            // deadline: task.deadline,\r\n            // description: task.description,\r\n            // priority: task.priority,\r\n            // startDate: task.startDate,\r\n            // выше написан длинный вариант\r\n            ...task,\r\n            ...domainModel\r\n        })\r\n            .then((res) => {\r\n                dispatch(updateTaskAC(todolistId, taskId, res.data.data.item))\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.id))\r\n    },[])\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | ReturnType<typeof setTodolistAC>\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newtodolist: TodolistDomainType = {...action.todolist, filter: 'all'}\r\n            return [newtodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const createTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\nexport const setTodolistAC = (todolists: TodolistType[]) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\nexport const getTodolists = (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistAC(res.data))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(id))\r\n        })\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(createTodolistAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    FilterValuesType,\r\n    getTodolists,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, updateTasksTC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolists)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, []);\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTasksTC(todolistId, id, {status}));\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, title: string, todolistId: string) {\r\n        const thunk = updateTasksTC(todolistId, id, {title});\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = createTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}