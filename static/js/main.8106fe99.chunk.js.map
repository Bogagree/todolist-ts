{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan.tsx","Todolist.tsx","Components/ButtonAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyPress","charCode","size","Button","onClick","style","background","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onKeyDown","onDoubleClick","Todolist","newTitle","changeTodoListTitle","todoListID","IconButton","deleteTodoList","aria-label","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","filter","color","changeFilter","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","newTask","taskId","tl","todolistID","Container","fixed","Grid","container","padding","newTodoListID","spacing","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8106fe99.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\n\r\ntype  AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <TextField\r\n                error={!!error}\r\n                id=\"outlined-basic\"\r\n                label={error}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                size={'small'}\r\n            />\r\n\r\n\r\n            <Button size=\"small\"\r\n                    variant=\"contained\"\r\n                    onClick={addItem}\r\n                    style={{\r\n                        background: 'purple',\r\n                        maxWidth: '30px',\r\n                        maxHeight: '30px',\r\n                        minWidth: '30px',\r\n                        minHeight: '30px'\r\n                    }}\r\n            >+</Button>\r\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const doubleClickHandler = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    function activateViewMode() {\r\n        setEditMode(!editMode)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return editMode\r\n        ? <input value={title} autoFocus onBlur={activateViewMode} onChange={onChangeHandler}\r\n                 onKeyDown={onKeyDownHandler}/>\r\n        : <span onDoubleClick={doubleClickHandler}>{props.title}</span>\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport {EditableSpan} from \"./Components/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todoListID: string, taskId: string) => void\r\n    changeFilter: (todoListID: string, value: FilterValuesType) => void\r\n    addTask: (todoListID: string, title: string) => void\r\n    changeTaskStatus: (todoListID: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    deleteTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (todoListID: string, taskId: string, title: string) => void\r\n    changeTodoListTitle: (todoListID: string, title: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(props.todoListID, title)\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.todoListID, \"all\")\r\n    ;\r\n    const onActiveClickHandler = () => props.changeFilter(props.todoListID, \"active\")\r\n    ;\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todoListID, \"completed\");\r\n\r\n    const deleteHandler = () => props.deleteTodoList(props.todoListID)\r\n\r\n    const onChangeTodoListTitleHandler = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListID, newTitle)\r\n\r\n    }\r\n\r\n    return <div>\r\n\r\n\r\n        <EditableSpan title={props.title} onChange={onChangeTodoListTitleHandler}/>\r\n\r\n        <IconButton onClick={deleteHandler} aria-label=\"delete\">\r\n            <Delete/>\r\n        </IconButton>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todoListID, t.id)\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todoListID, t.id, e.currentTarget.checked);\r\n                    }\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(props.todoListID, t.id, newValue);\r\n                    }\r\n\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        {/*<input type=\"checkbox\"*/}\r\n                        {/*       onChange={onChangeStatusHandler}*/}\r\n                        {/*       checked={t.isDone}/>*/}\r\n\r\n                        <Checkbox onChange={onChangeStatusHandler}\r\n                                  checked={t.isDone}/>\r\n\r\n                        <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                        <IconButton onClick={onClickHandler} aria-label=\"delete\">\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n            }\r\n\r\n        </ul>\r\n        <div>\r\n\r\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"contained\"} color=\"secondary\" size={'small'}\r\n                    onClick={onAllClickHandler}>All</Button>\r\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"contained\"} color=\"success\" size={'small'}\r\n                    onClick={onActiveClickHandler}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"contained\"} color=\"error\" size={'small'}\r\n                    onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./Components/AddItemForm\";\r\nimport ButtonAppBar from \"./Components/ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const App = () => {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodoListsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    function removeTask(todoListID: string, id: string) {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(t => t.id !== id)})\r\n\r\n    }\r\n\r\n    function addTask(todoListID: string, title: string) {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n\r\n    function changeTaskStatus(todoListID: string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: isDone} : t)})\r\n    }\r\n\r\n    function changeFilter(todoListID: string, value: FilterValuesType) {\r\n        setTodolists(todolists.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl))\r\n    }\r\n\r\n    const deleteTodoList = (todoListID: string) => {\r\n        setTodolists(todolists.filter(tl => tl.id !== todoListID))\r\n    }\r\n    const addTodoList = (newTitle: string) => {\r\n        let newTodoListID = v1();\r\n        let newTodoList: TodoListsType = {id: newTodoListID, title: newTitle, filter: \"all\"}\r\n        setTodolists([newTodoList, ...todolists])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n    const changeTaskTitle = (todoListID: string, taskId: string, newTitle: string) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].map(t => t.id === taskId ? {...t, title: newTitle} : t)})\r\n    }\r\n\r\n    const changeTodoListTitle = (todolistID: string, newTitle: string) => {\r\n        setTodolists(todolists.map(tl => tl.id === todolistID ? {...tl, title: newTitle} : tl))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <ButtonAppBar/>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 10px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let tasksForTodolist = tasks[tl.id];\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(t => !t.isDone);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = tasks[tl.id].filter(t => t.isDone);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        todoListID={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        deleteTodoList={deleteTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}