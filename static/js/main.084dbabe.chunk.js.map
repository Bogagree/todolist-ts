{"version":3,"sources":["api/todolists-api.ts","app/app-reducer.ts","features/Todolists/todolists-reducer.ts","utils/error-utils.ts","features/Todolists/tasks-reducer.ts","components/Additemform/AddItemForm.tsx","components/Editablespan/EditableSpan.tsx","features/Todolists/Task/Task.tsx","features/Todolists/Todolist.tsx","features/Todolists/TodolistsList.tsx","features/Login/Login.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppError","type","payload","setAppStatus","fetchTodolists","dispatch","then","res","todolists","data","handelServerAppError","messages","length","updateTasksTC","domainModel","getState","task","tasks","find","t","resultCode","updateTaskAC","item","catch","message","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","todolist","removeTodolist","addTask","changeTodolistTitle","changeFilter","useDispatch","addTaskHandler","changeTodolistTitleHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","useEffect","setTasksAC","items","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","removeTaskAC","removeTaskTC","addTaskTC","thunk","action","changeTodoEntityStatusAC","removeTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","createTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","alert","JSON","stringify","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","rootReducer","combineReducers","todoListId","copyState","forEach","newtodolist","app","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","window","Alert","forwardRef","ref","elevation","ErrorSnackbar","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.084dbabe.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e4310913-ee1d-4f45-afb2-bf32043c1264'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType<TodolistType>>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<LoginParamsType, ResponseType<{ userId?: number }>>('auth/login', data);\r\n        return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","const initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n        case 'APP/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ActionCreators\r\nexport const setAppError = (error: { error: string | null }) => {\r\n    return {type: 'APP/SET-ERROR', payload: error} as const\r\n}\r\n\r\nexport const setAppStatus = (status: { status: RequestStatusType }) => {\r\n    return {type: 'APP/SET-STATUS', payload: status} as const\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\n\r\ntype ActionsType = SetAppErrorActionType | SetAppStatusActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/app-reducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newtodolist: TodolistDomainType = {...action.todolist, entityStatus: 'idle', filter: 'all'}\r\n            return [newtodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, entityStatus: 'idle', filter: 'all'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setTodolistAC = (todolists: TodolistType[]) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const createTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const changeTodoEntityStatusAC = (id: string, entityStatus: RequestStatusType): ChangeTodolistEntityStatusActionType => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus}\r\n}\r\n\r\n//thunks\r\nexport const fetchTodolists = (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistAC(res.data))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodoEntityStatusAC(id, 'loading'))\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(id))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(createTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(res => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n}\r\n\r\n//types\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type ChangeTodolistEntityStatusActionType = {\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | ReturnType<typeof setTodolistAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ChangeTodolistEntityStatusActionType","import {setAppError, setAppStatus} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handelServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { error: string }, dispatch: Dispatch) => {\r\n    console.log(error)\r\n    dispatch(setAppError(error ? error : {error: 'Some error occurred'}))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n    // dispatch(setAppError({error: error.message}))\r\n    // dispatch(setAppStatus({status: 'failed'}))\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, setTodolistAC} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppError, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handelServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        case \"SET-TODOLISTS\" : {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateTaskDomaineModelType): UpdateTaskStatusActionType => {\r\n    return {type: 'UPDATE-TASK', model, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({type: 'SET-TASKS', todolistId, tasks}) as const\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        }).catch((error) => {\r\n        dispatch(setAppError({error: error.message}))\r\n        dispatch(setAppStatus({status: 'failed'}))\r\n    })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppError({error: error.message}))\r\n            dispatch(setAppStatus({status: 'failed'}))\r\n        })\r\n}\r\n// для примера написал санку на try/catch пока не буду удалять,\r\n// export const removeTaskTC = (todolistId:string, taskId:string) => async (dispatch: Dispatch) => {\r\n//     try{\r\n//         const response = await todolistsAPI.deleteTask(todolistId, taskId)\r\n//      if    (response.data.resultCode === 0 ) {\r\n//          dispatch(removeTaskAC(taskId, todolistId))\r\n//      }\r\n//     } catch (e) {\r\n//         console.log(e)\r\n//     } finally {\r\n//\r\n//     }\r\n// }\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppError({error: error.message}))\r\n            dispatch(setAppStatus({status: 'failed'}))\r\n        })\r\n}\r\nexport const updateTasksTC = (todolistId: string, taskId: string, domainModel: UpdateTaskDomaineModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    // тут беру метод find а не filter потому что нужно взять первое значение, filter пойдет до конца массива лишняя операция\r\n    if (task) {\r\n        todolistsAPI.updateTask(todolistId, taskId, {\r\n            ...task,\r\n            ...domainModel\r\n        })\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, res.data.data.item))\r\n                } else {\r\n                    handelServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // handleServerNetworkError(error, dispatch)\r\n                dispatch(setAppError({error: error.message}))\r\n                dispatch(setAppStatus({status: 'failed'}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\nexport type UpdateTaskStatusActionType = {\r\n    type: 'UPDATE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateTaskDomaineModelType\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type UpdateTaskDomaineModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | UpdateTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../components/Editablespan/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../components/Additemform/AddItemForm'\r\nimport {EditableSpan} from '../../components/Editablespan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from './todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\n// export const Todolist = React.memo(function ( TodoListPropsType) {\r\nexport const Todolist = React.memo(function ({\r\n                                                 todolist,\r\n                                                 removeTodolist,\r\n                                                 removeTask,\r\n                                                 tasks,\r\n                                                 addTask,\r\n                                                 changeTaskTitle,\r\n                                                 changeTodolistTitle,\r\n                                                 changeTaskStatus,\r\n                                                 changeFilter\r\n                                             }: TodoListPropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id)\r\n    }\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler} disabled={todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                                                    removeTask={removeTask}\r\n                                                                    changeTaskTitle={changeTaskTitle}\r\n                                                                    changeTaskStatus={changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    FilterValuesType,\r\n    fetchTodolists,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTasksTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemForm} from \"../../components/Additemform/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {Todolist} from \"./Todolist\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolists)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTasksTC(todolistId, id, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, title: string, todolistId: string) {\r\n        const thunk = updateTasksTC(todolistId, id, {title});\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = createTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(tl => {\r\n\r\n                let allTodolistTasks = tasks[tl.id];\r\n\r\n                return <Grid item key={tl.id}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            todolist={tl}\r\n                            tasks={allTodolistTasks}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {email: 'Email is required'}\r\n            }\r\n\r\n            if (!values.password) {\r\n                return {password: 'Password is required'}\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values));\r\n        },\r\n    });\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"password\")}\r\n                                                             checked={formik.values.rememberMe}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import {tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {todolistsReducer} from '../features/Todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from './app-reducer';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\n// export const store = configureStore({\r\n//     reducer: rootReducer,\r\n//     middleware: (getDefaultMiddleware) =>\r\n//         getDefaultMiddleware()\r\n//             .prepend(\r\n//                 // correctly typed middlewares can just be used\r\n//                 additionalMiddleware,\r\n//                 // you can also type middlewares manually\r\n//                 untypedMiddleware as Middleware<\r\n//                     (action: Action<'specialAction'>) => number,\r\n//                     RootState\r\n//                     >\r\n//             )\r\n//             // prepend and concat calls can be chained\r\n//             .concat(logger),\r\n// })\r\n// })\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import {forwardRef, SyntheticEvent} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppError} from '../../app/app-reducer';\r\n\r\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref,) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    // const [open, setOpen] = useState(true);\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n        // setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport './App.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {TodolistsList} from \"../features/Todolists/TodolistsList\";\r\nimport {BrowserRouter, HashRouter, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {LinearProgress} from '@mui/material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useAppSelector} from './store';\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useAppSelector(state => state.app.status)\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={\"/login\"} element={<Login/>}/>\r\n                        <Route path={\"/\"} element={<TodolistsList/>}/>\r\n                        <Route path={'*'} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}