{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todolists/tasks-reducer.ts","features/Todolists/todolists-reducer.ts","app/store.ts","components/Additemform/AddItemForm.tsx","components/Editablespan/EditableSpan.tsx","features/Todolists/Task/Task.tsx","features/Todolists/Todolist.tsx","features/Todolists/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handelServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","console","log","message","initialState","isLoggedIn","setIsLoggedIn","type","payload","status","isInitialised","updateTasksTC","domainModel","getState","task","tasks","find","t","then","res","resultCode","updateTaskAC","item","catch","rootReducer","combineReducers","state","action","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","newtodolist","entityStatus","app","auth","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","removeTodolist","addTask","changeTodolistTitle","changeFilter","useDispatch","addTaskHandler","changeTodolistTitleHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","useEffect","setTasksAC","items","style","paddingTop","Button","TodolistsList","removeTaskAC","removeTaskTC","addTaskTC","thunk","changeTodoEntityStatusAC","removeTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","createTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logOutHandler","AppBar","position","Box","Toolbar","edge","Menu","Typography","component","flexGrow","LinearProgress","Container","fixed","path","element","top","right","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"mMA0EYA,EAOAC,E,+IA/ENC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EACG,WACR,OAAON,EAASO,IAAoB,aACxC,EAHSD,EAIK,SAACE,GACX,OAAOR,EAASS,KAA6E,aAAc,CAACD,SAChH,EANSF,EAOK,SAACI,GACX,OAAOV,EAASW,OAAM,qBAA2CD,GACrE,EATSJ,EAUK,SAACI,EAAYF,GACvB,OAAOR,EAASY,IAAG,qBAA+DF,GAAM,CAACF,SAC7F,EAZSF,EAaD,SAACO,GACL,OAAOb,EAASO,IAAG,qBAAiCM,EAAU,UAClE,EAfSP,EAgBC,SAACO,EAAoBC,GAC3B,OAAOd,EAASW,OAAM,qBAAuCE,EAAU,kBAAUC,GACrF,EAlBSR,EAmBC,SAACO,EAAoBL,GAC3B,OAAOR,EAASS,KAAI,qBAAmFI,EAAU,UAAU,CAACL,SAChI,EArBSF,EAsBC,SAACO,EAAoBC,EAAgBC,GAC3C,OAAOf,EAASY,IAAG,qBAAqFC,EAAU,kBAAUC,GAAUC,EAC1I,EAISC,EACJ,SAACC,GACF,OAAOjB,EAASS,KAAwE,aAAcQ,EAC1G,EAHSD,EAIP,WACE,OAAOhB,EAASO,IAAgE,WACpF,EANSS,EAOH,WACF,OAAOhB,EAASW,OAAqB,cACzC,GA+BH,SALWb,OAAY,aAAZA,IAAY,2BAAZA,IAAY,yBAAZA,IAAY,iBAKvB,CALWA,MAAY,KAavB,SANWC,OAAc,aAAdA,IAAc,mBAAdA,IAAc,WAAdA,IAAc,uBAAdA,IAAc,iBAMzB,CANWA,MAAc,KC5EnB,IAAMmB,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAYL,EAAKG,SAAS,KAEnCD,EAASG,EAAY,wBAEzBH,EAASI,EAAa,UAC1B,EAEaC,EAA2B,SAACC,EAAmBN,GACxDO,QAAQC,IAAIF,EAAMG,SAClBT,EAASG,EAAYG,EAAQA,EAAMG,QAAU,wBAC7CT,EAASI,EAAa,UAE1B,ECdMM,EAAqC,CACvCC,YAAY,GAcHC,EAAgB,SAACD,GAAmB,MAAM,CAACE,KAAM,wBAAyBC,QAAS,CAACH,cAAY,ECfvGD,EAAe,CACjBK,OAAQ,UACRT,MAAO,KACPU,eAAe,GAeNb,EAAc,SAACG,GACxB,MAAO,CAACO,KAAM,gBAAiBC,QAAS,CAACR,MAAOA,GACpD,EACaF,EAAe,SAACW,GACzB,MAAO,CAACF,KAAM,iBAAkBC,QAAS,CAACC,OAAQA,GACtD,ECrBML,EAA+B,CAAC,EA2GzBO,EAAgB,SAACvB,EAAoBC,EAAgBuB,GAAuC,OAAK,SAAClB,EAA6BmB,GACxInB,EAASI,EAAa,YACtB,IAAMgB,EAAOD,IAAWE,MAAM3B,GAAY4B,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOI,CAAM,IAE/DyB,GACAjC,EAAwBO,EAAYC,EAAO,2BACpCyB,GACAF,IAEFM,MAAK,SAACC,GACyB,IAAxBA,EAAI3B,KAAK4B,WACT1B,EAtEQ,SAACN,EAAoBC,EAAgBC,GAC7D,MAAO,CAACiB,KAAM,cAAejB,QAAOF,aAAYC,SACpD,CAoE6BgC,CAAajC,EAAYC,EAAQ8B,EAAI3B,KAAKA,KAAK8B,OAExD7B,EAAqB0B,EAAI3B,KAAME,EAEvC,IACC6B,OAAM,SAACvB,GAEJN,EAASG,EAAYG,EAAMG,UAC3BT,EAASI,EAAa,UAC1B,GAEZ,CAAC,ECnIKM,EAA0C,G,iBCG1CoB,EAAcC,YAAgB,CAChCV,MFAwB,WAAgF,IAA/EW,EAAqB,uDAAGtB,EAAcuB,EAAmB,uCAClF,OAAQA,EAAOpB,MACX,IAAK,cACD,OAAO,2BACAmB,GAAK,kBAAGC,EAAOvC,WAAasC,EAAMC,EAAOvC,YAAYwC,QAAO,SAAAd,GAAI,OAAIA,EAAK7B,KAAO0C,EAAOtC,MAAM,MAExG,IAAK,WACD,OAAO,2BACAqC,GAAK,kBACPC,EAAOb,KAAKe,WAAU,CAAIF,EAAOb,MAAI,mBAAKY,EAAMC,EAAOb,KAAKe,gBAErE,IAAK,cACD,OAAO,2BACAH,GAAK,kBACPC,EAAOvC,WAAasC,EAAMC,EAAOvC,YAAY0C,KAAI,SAAAb,GAAC,OAAIA,EAAEhC,KAAO0C,EAAOtC,OAAM,2BAAO4B,GAAMU,EAAOrC,OAAS2B,CAAC,MAEnH,IAAK,eACD,OAAO,2BACAS,GAAK,kBACPC,EAAOI,SAAS9C,GAAK,KAE9B,IAAK,kBACD,IAAM+C,EAAS,eAAON,GAEtB,cADOM,EAAUL,EAAO1C,IACjB+C,EACX,IAAK,gBACD,IAAMA,EAAS,eAAON,GAItB,OAHAC,EAAOM,UAAUC,SAAQ,SAAAC,GACrBH,EAAUG,EAAGlD,IAAM,EACvB,IACO+C,EAEX,IAAK,YACD,OAAO,2BAAIN,GAAK,kBAAGC,EAAOvC,WAAauC,EAAOZ,QAClD,QACI,OAAOW,EAEnB,EEpCIO,UDH4B,WAAsG,IAArGP,EAAgC,uDAAGtB,EAAcuB,EAAmB,uCACjG,OAAQA,EAAOpB,MACX,IAAK,kBACD,OAAOmB,EAAME,QAAO,SAAAO,GAAE,OAAIA,EAAGlD,KAAO0C,EAAO1C,EAAE,IAEjD,IAAK,eACD,IAAMmD,EAA+B,2BAAOT,EAAOI,UAAQ,IAAEM,aAAc,OAAQT,OAAQ,QAC3F,MAAM,CAAEQ,GAAW,mBAAKV,IAE5B,IAAK,wBACD,OAAOA,EAAMI,KAAI,SAAAK,GAAE,OAAIA,EAAGlD,KAAO0C,EAAO1C,GAAE,2BAAOkD,GAAE,IAAEpD,MAAO4C,EAAO5C,QAASoD,CAAE,IAElF,IAAK,yBACD,OAAOT,EAAMI,KAAI,SAAAK,GAAE,OAAIA,EAAGlD,KAAO0C,EAAO1C,GAAE,2BAAOkD,GAAE,IAAEP,OAAQD,EAAOC,SAAUO,CAAE,IAEpF,IAAK,gBACD,OAAOR,EAAOM,UAAUH,KAAI,SAAAK,GAAE,kCAASA,GAAE,IAAEE,aAAc,OAAQT,OAAQ,OAAK,IAClF,IAAK,gCACD,OAAOF,EAAMI,KAAI,SAAAK,GAAE,OAAIA,EAAGlD,KAAO0C,EAAO1C,GAAE,2BAAOkD,GAAE,IAAEE,aAAcV,EAAOU,eAAgBF,CAAE,IAChG,QACI,OAAOT,EAEnB,EClBIY,IHAsB,WAA0F,IAAzFZ,EAA0B,uDAAGtB,EAAcuB,EAAmB,uCACrF,OAAQA,EAAOpB,MACX,IAAK,iBACL,IAAK,gBACL,IAAK,yBACD,OAAO,2BAAImB,GAAUC,EAAOnB,SAChC,QACI,OAAOkB,EAEnB,EGRIa,KJHuB,WAA4F,IAA3Fb,EAA2B,uDAAGtB,EAAcuB,EAAmB,uCACvF,MACS,0BADDA,EAAOpB,KAEA,2BAAImB,GAAUC,EAAOnB,SAErBkB,CAEnB,IIiBac,EAAQC,YAAYjB,EAAakB,YAAgBC,MAGjDC,EAAyDC,IAGtEC,OAAON,MAAQA,E,8CC7BFO,EAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAO,EAAPA,QAAQ,EAAD,EAAEC,gBAAQ,OAAQ,EAEtE,EAAwBC,mBAAS,IAAG,mBAA/BrE,EAAK,KAAEsE,EAAQ,KACpB,EAAwBD,mBAAwB,MAAK,mBAAhDpD,EAAK,KAAEsD,EAAQ,KAEdC,EAAiB,WACE,KAAjBxE,EAAMyE,QACNN,EAAQnE,GACRsE,EAAS,KAETC,EAAS,oBAEjB,EAeA,OAAO,gCACH,cAACG,EAAA,EAAS,CAACC,QAAQ,WACRP,SAAUA,EACVnD,QAASA,EACT2D,MAAO5E,EACP6E,SAlBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,MAC7B,EAiBeI,WAfW,SAACF,GACT,OAAV7D,GACAsD,EAAS,MAEM,KAAfO,EAAEG,UACFT,GAER,EASeU,MAAM,QACNC,WAAYlE,IAEvB,cAACmE,EAAA,EAAU,CAACC,MAAM,UAAUC,QAASd,EAAgBJ,SAAUA,EAAS,SACpE,cAACmB,EAAA,EAAM,QAGnB,I,SC3CaC,GAAevB,IAAMC,MAAK,SAAUuB,GAC7C,MAA8BpB,oBAAS,GAAM,mBAAxCqB,EAAQ,KAAEC,EAAW,KAC1B,EAAwBtB,mBAASoB,EAAMb,OAAM,mBAAxC5E,EAAK,KAAEsE,EAAQ,KAcpB,OAAOoB,EACD,cAAChB,EAAA,EAAS,CAACE,MAAO5E,EAAO6E,SALX,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,MAC7B,EAGsDgB,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMZ,SAAS7E,EACnB,IAOM,sBAAM8F,cAda,WACrBH,GAAY,GACZrB,EAASmB,EAAMb,MACnB,EAW4C,SAAEa,EAAMb,OACxD,I,oBCZamB,GAAO9B,IAAMC,MAAK,SAACuB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAM1D,KAAK7B,GAAIuF,EAAMpF,WAAW,GAAE,CAACoF,EAAM1D,KAAK7B,GAAIuF,EAAMpF,aAE5G8F,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAM1D,KAAK7B,GAAIkG,EAAiB9G,EAAaiH,UAAYjH,EAAakH,IAAKf,EAAMpF,WAC5G,GAAG,CAACoF,EAAM1D,KAAK7B,GAAIuF,EAAMpF,aAEnBoG,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAM1D,KAAK7B,GAAIwG,EAAUjB,EAAMpF,WACzD,GAAG,CAACoF,EAAM1D,KAAK7B,GAAIuF,EAAMpF,aAEzB,OAAO,sBAAyBuG,UAAWnB,EAAM1D,KAAKL,SAAWpC,EAAaiH,UAAY,UAAY,GAAG,UACrG,cAACM,GAAA,EAAQ,CACLR,QAASZ,EAAM1D,KAAKL,SAAWpC,EAAaiH,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,cAACX,GAAY,CAACZ,MAAOa,EAAM1D,KAAK/B,MAAO6E,SAAU4B,IACjD,cAACrB,EAAA,EAAU,CAACE,QAASU,EAAe,SAChC,cAACc,GAAA,EAAM,QATErB,EAAM1D,KAAK7B,GAYhC,ICda6G,GAAW9C,IAAMC,MAAK,YAUiC,IATnBlB,EAAQ,EAARA,SACAgE,EAAc,EAAdA,eACAd,EAAU,EAAVA,WACAlE,EAAK,EAALA,MACAiF,EAAO,EAAPA,QACAN,EAAe,EAAfA,gBACAO,EAAmB,EAAnBA,oBACAZ,EAAgB,EAAhBA,iBACAa,EAAY,EAAZA,aAGvCxG,EAAWyG,cAEXC,EAAiBpB,uBAAY,SAACjG,GAChCiH,EAAQjH,EAAOgD,EAAS9C,GAC5B,GAAG,CAAC+G,EAASjE,EAAS9C,KAKhBoH,EAA6BrB,uBAAY,SAACjG,GAC5CkH,EAAoBlE,EAAS9C,GAAIF,EACrC,GAAG,CAACgD,EAAS9C,GAAIgH,IAEXK,EAAoBtB,uBAAY,kBAAMkB,EAAa,MAAOnE,EAAS9C,GAAG,GAAE,CAAC8C,EAAS9C,GAAIiH,IACtFK,EAAuBvB,uBAAY,kBAAMkB,EAAa,SAAUnE,EAAS9C,GAAG,GAAE,CAAC8C,EAAS9C,GAAIiH,IAC5FM,EAA0BxB,uBAAY,kBAAMkB,EAAa,YAAanE,EAAS9C,GAAG,GAAE,CAAC8C,EAAS9C,GAAIiH,IAGpGO,EAAmB1F,EAavB,MAXwB,WAApBgB,EAASH,SACT6E,EAAmB1F,EAAMa,QAAO,SAAAX,GAAC,OAAIA,EAAER,SAAWpC,EAAakH,GAAG,KAE9C,cAApBxD,EAASH,SACT6E,EAAmB1F,EAAMa,QAAO,SAAAX,GAAC,OAAIA,EAAER,SAAWpC,EAAaiH,SAAS,KAG5EoB,qBAAU,WNFc,IAACtH,EMGrBM,GNHqBN,EMGC2C,EAAS9C,GNHa,SAACS,GACjDA,EAASI,EAAa,YACtBjB,EAAsBO,GACjB8B,MAAK,SAACC,GACHzB,EARc,SAACN,EAAoB2B,GAAiB,MAAM,CAACR,KAAM,YAAanB,aAAY2B,QAAM,CAQvF4F,CAAWvH,EAAY+B,EAAI3B,KAAKoH,QACzClH,EAASI,EAAa,aAC1B,IAAGyB,OAAM,SAACvB,GACVN,EAASG,EAAYG,EAAMG,UAC3BT,EAASI,EAAa,UAC1B,GACJ,GMNI,GAAG,CAACJ,EAAUqC,EAAS9C,KAEhB,gCACH,+BAAI,cAACsF,GAAY,CAACZ,MAAO5B,EAAShD,MAAO6E,SAAUyC,IAC/C,cAAClC,EAAA,EAAU,CAACE,QA3BU,WAC1B0B,EAAehE,EAAS9C,GAC5B,EAyBoDkE,SAAoC,YAA1BpB,EAASM,aAA2B,SACtF,cAACwD,GAAA,EAAM,SAGf,cAAC9C,EAAW,CAACG,QAASkD,EAAgBjD,SAAoC,YAA1BpB,EAASM,eACzD,8BAEQoE,GAAoBA,EAAiB3E,KAAI,SAAAb,GAAC,OAAI,cAAC6D,GAAI,CAAYhE,KAAMG,EAAG7B,WAAY2C,EAAS9C,GACzCgG,WAAYA,EACZS,gBAAiBA,EACjBL,iBAAkBA,GAHbpE,EAAEhC,GAIzD,MAGV,sBAAK4H,MAAO,CAACC,WAAY,QAAQ,UAC7B,cAACC,EAAA,EAAM,CAACrD,QAA6B,QAApB3B,EAASH,OAAmB,WAAa,OAClDyC,QAASiC,EACTlC,MAAO,UAAU,iBAGzB,cAAC2C,EAAA,EAAM,CAACrD,QAA6B,WAApB3B,EAASH,OAAsB,WAAa,OACrDyC,QAASkC,EACTnC,MAAO,UAAU,oBAEzB,cAAC2C,EAAA,EAAM,CAACrD,QAA6B,cAApB3B,EAASH,OAAyB,WAAa,OACxDyC,QAASmC,EACTpC,MAAO,YAAY,4BAIvC,I,SChFa4C,GAA0B,WACnC,IAAM/E,EAAYY,aAAyD,SAAAnB,GAAK,OAAIA,EAAMO,SAAS,IAC7FlB,EAAQ8B,aAA8C,SAAAnB,GAAK,OAAIA,EAAMX,KAAK,IAC1EV,EAAauC,GAAe,SAAAlB,GAAK,OAAIA,EAAMa,KAAKlC,UAAU,IAE1DX,EAAWyG,cAEjBO,qBAAU,WACDrG,GAGLX,GNsBG,SAACA,GACJA,EAASI,EAAa,YACtBjB,IACKqC,MAAK,SAACC,GACHzB,EAxBL,CAACa,KAAM,gBAAiB0B,UAwBId,EAAI3B,OAC3BE,EAASI,EAAa,aAC1B,IACCyB,OAAM,SAAAvB,GACHD,EAAyBC,EAAON,EACpC,GACR,GM/BA,GAAG,CAACW,EAAYX,IAEhB,IAAMuF,EAAaD,uBAAY,SAAU/F,EAAYG,GACjDM,EPsCoB,SAACN,EAAoBC,GAAc,OAAK,SAACK,GACjEb,EAAwBO,EAAYC,GAC/B6B,MAAK,SAACC,GACyB,IAAxBA,EAAI3B,KAAK4B,WACT1B,EA5BY,SAACL,EAAgBD,GACzC,MAAO,CAACmB,KAAM,cAAelB,OAAQA,EAAQD,WAAYA,EAC7D,CA0ByB6H,CAAa5H,EAAQD,IAE9BK,EAAqB0B,EAAI3B,KAAME,EAEvC,IACC6B,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,CAAC,COlDgBwH,CAAa9H,EAAYH,GACtC,GAAG,CAACS,IAEEsG,EAAUhB,uBAAY,SAAUjG,EAAeK,GACjDM,EP4DiB,SAACN,EAAoBL,GAAa,OAAK,SAACW,GAC7DA,EAASI,EAAa,YACtBjB,EAAwBO,EAAYL,GAC/BmC,MAAK,SAACC,GACyB,IAAxBA,EAAI3B,KAAK4B,YACT1B,EAnDL,CAACa,KAAM,WAAYO,KAmDKK,EAAI3B,KAAKA,KAAK8B,OACjC5B,EAASI,EAAa,eAEtBL,EAAqB0B,EAAI3B,KAAME,EAEvC,IACC6B,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,CAAC,CO1EgByH,CAAU/H,EAAYL,GACnC,GAAG,CAACW,IAEE2F,EAAmBL,uBAAY,SAAU/F,EAAYwB,EAAsBrB,GAC7EM,EAASiB,EAAcvB,EAAYH,EAAI,CAACwB,WAC5C,GAAG,CAACf,IAEEgG,EAAkBV,uBAAY,SAAU/F,EAAYF,EAAeK,GACrE,IAAMgI,EAAQzG,EAAcvB,EAAYH,EAAI,CAACF,UAC7CW,EAAS0H,EACb,GAAG,CAAC1H,IAEEwG,EAAelB,uBAAY,SAAUrB,EAAyBvE,GAChE,IAAMuC,ENPH,CAACpB,KAAM,yBAA0BtB,GMOEG,ENPMwC,OMOM+B,GAClDjE,EAASiC,EACb,GAAG,CAACjC,IAEEqG,EAAiBf,uBAAY,SAAU/F,GACzC,IAAMmI,ENSkB,SAACnI,GAAU,OAAK,SAACS,GAC7CA,EAASI,EAAa,YACtBJ,EArBoC,SAACT,EAAYoD,GACjD,MAAO,CAAC9B,KAAM,gCAAiCtB,KAAIoD,aAoBb,UAnB1C,CAmBagF,CAAyBpI,IAClCJ,EAA4BI,GACvBiC,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3B,KAAK4B,aACT1B,EApCL,CAACa,KAAM,kBAAmBtB,GAoCKA,IAC1BS,EAASI,EAAa,cAE9B,IACCyB,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,CAAC,CMtBqB4H,CAAiBrI,GAC/BS,EAAS0H,EACb,GAAG,CAAC1H,IAEEuG,EAAsBjB,uBAAY,SAAU/F,EAAYF,GAC1D,IAAMqI,EN+BuB,SAACnI,EAAYF,GAAa,OAAK,SAACW,GACjEb,EAA4BI,EAAIF,GAC3BmC,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3B,KAAK4B,YACT1B,EAxDqB,SAACT,EAAYF,GAC9C,MAAO,CAACwB,KAAM,wBAAyBtB,GAAIA,EAAIF,MAAOA,EAC1D,CAsDyBwI,CAAsBtI,EAAIF,GAE3C,IACCwC,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,CAAC,CMzCqB8H,CAAsBvI,EAAIF,GACxCW,EAAS0H,EACb,GAAG,CAAC1H,IAEE+H,EAAczC,uBAAY,SAACjG,GAC7B,IAAMqI,ENakB,SAACrI,GAAa,OAAK,SAACW,GAChDA,EAASI,EAAa,YACtBjB,EAA4BE,GACvBmC,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3B,KAAK4B,aACT1B,EA9CL,CAACa,KAAM,eAAgBwB,SA8CQZ,EAAI3B,KAAKA,KAAK8B,OACxC5B,EAASI,EAAa,cAE9B,IACCyB,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,CAAC,CMzBqBgI,CAAiB3I,GAC/BW,EAAS0H,EACb,GAAG,CAAC1H,IAEJ,OAAKW,EAIE,qCACH,cAACsH,EAAA,EAAI,CAACC,WAAS,EAACf,MAAO,CAACgB,QAAS,QAAQ,SACrC,cAAC9E,EAAW,CAACG,QAASuE,MAE1B,cAACE,EAAA,EAAI,CAACC,WAAS,EAACE,QAAS,EAAE,SACtB7F,EAAUH,KAAI,SAAAK,GAEX,IAAI4F,EAAmBhH,EAAMoB,EAAGlD,IAEhC,OAAO,cAAC0I,EAAA,EAAI,CAACrG,MAAI,WACb,cAAC0G,EAAA,EAAK,CAACnB,MAAO,CAACgB,QAAS,QAAQ,SAC5B,cAAC/B,GAAQ,CACL/D,SAAUI,EACVpB,MAAOgH,EACP9C,WAAYA,EACZiB,aAAcA,EACdF,QAASA,EACTX,iBAAkBA,EAClBU,eAAgBA,EAChBL,gBAAiBA,EACjBO,oBAAqBA,OAXV9D,EAAGlD,GAe9B,SA3BG,cAAC,KAAQ,CAACgJ,GAAI,UA+B7B,E,kDChGMC,GAAQC,sBAAuC,SAAe3D,EAAO4D,GACvE,OAAO,cAAC,KAAQ,aAACC,UAAW,EAAGD,IAAKA,EAAK1E,QAAQ,UAAac,GAClE,IAEO,SAAS8D,KACZ,IAAMtI,EAAQ4C,GAAe,SAAAlB,GAAK,OAAIA,EAAMY,IAAItC,KAAK,IAC/CN,EAAWyG,cAEXoC,EAAmB,OAAVvI,EAETwI,EAAc,SAACC,EAAgCC,GAClC,cAAXA,GAGJhJ,EAASG,EAAY,MACzB,EAEA,OACI,cAAC8I,GAAA,EAAQ,CAACC,KAAML,EAAQM,iBAAkB,IAAMC,QAASN,EAAY,SACjE,cAAC,GAAK,CAACM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAAQ,SAC7DjJ,KAIjB,C,sDChBakJ,GAAQ,WAEjB,IAAMxJ,EAAWyG,cAEX9F,EAAauC,GAAe,SAAAlB,GAAK,OAAIA,EAAMa,KAAKlC,UAAU,IAE1D8I,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAGhBC,SAAU,SAACC,GACP,OAAKA,EAAOJ,MAIPI,EAAOH,cAAZ,EACW,CAACA,SAAU,wBAJX,CAACD,MAAO,oBAMvB,EACAK,SAAU,SAAAD,GXdK,IAAClK,EWeZE,GXfYF,EWeKkK,EXfqB,SAAChK,GAC/CA,EAASI,EAAa,YACtBP,EAAcC,GACT0B,MAAK,SAACC,GACyB,IAAxBA,EAAI3B,KAAK4B,YACT1B,EAASY,GAAc,IACvBZ,EAASI,EAAa,eAEtBL,EAAqB0B,EAAI3B,KAAME,EAEvC,IACC6B,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,GWEQ,IAGJ,OAAIW,EACO,cAAC,KAAQ,CAAC4H,GAAI,MAGlB,cAACN,EAAA,EAAI,CAACC,WAAS,EAACgC,eAAgB,SAAS,SAC5C,cAACjC,EAAA,EAAI,CAACrG,MAAI,EAACsI,eAAgB,SAAS,SAChC,sBAAMD,SAAUR,EAAOU,aAAa,SAChC,eAACC,GAAA,EAAW,WACR,eAACC,GAAA,EAAS,WACN,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aAAY,sBAGzC,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAS,WACN,cAAC1G,EAAA,EAAS,aAACQ,MAAM,QACNmG,OAAO,UACHjB,EAAOkB,cAAc,WAEnClB,EAAOmB,OAAOhB,MAAQ,qBAAKzC,MAAO,CAACzC,MAAO,OAAO,SAAE+E,EAAOmB,OAAOhB,QAAe,KAEjF,cAAC7F,EAAA,EAAS,aAAClD,KAAK,WACL0D,MAAM,WACNmG,OAAO,UACHjB,EAAOkB,cAAc,cAEnClB,EAAOmB,OAAOf,SAAW,qBAAK1C,MAAO,CAACzC,MAAO,OAAO,SAAE+E,EAAOmB,OAAOf,WAAkB,KAEvF,cAACgB,GAAA,EAAgB,CAACtG,MAAO,cACPuG,QAAS,cAAC5E,GAAA,EAAQ,2BAAKuD,EAAOkB,cAAc,eAAa,IACtCjF,QAAS+D,EAAOO,OAAOF,gBAG5D,cAACzC,EAAA,EAAM,CAACxG,KAAM,SACNmD,QAAS,YACTU,MAAO,UAAU,+BAQjD,ECpBeqG,OAjDf,WAEI,IAAMhK,EAASmC,GAAe,SAAAlB,GAAK,OAAIA,EAAMY,IAAI7B,MAAM,IACjDC,EAAgBkC,GAAe,SAAAlB,GAAK,OAAIA,EAAMY,IAAI5B,aAAa,IAC/DL,EAAauC,GAAe,SAAAlB,GAAK,OAAIA,EAAMa,KAAKlC,UAAU,IAE1DX,EAAWyG,cAEjBO,qBAAU,WACNhH,GXK6B,SAACA,GAClCH,IACK2B,MAAK,SAAAC,GAC0B,IAAxBA,EAAI3B,KAAK4B,YACT1B,EAASY,GAAc,IAE3BZ,EAASI,EAAa,cACtBJ,EAXD,CAACa,KAAM,yBAA0BC,QAAS,CAACE,eAWf,IAC/B,IACCa,OAAM,SAAAvB,GACHD,EAAyBC,EAAON,EACpC,GACR,GWhBI,GAAG,CAACA,IAEJ,IAAMgL,EAAgB1F,uBAAY,WAC9BtF,GZMsB,SAACA,GAC3BA,EAASI,EAAa,YACtBP,IACK2B,MAAK,SAACC,GACyB,IAAxBA,EAAI3B,KAAK4B,YACT1B,EAASY,GAAc,IACvBZ,EAASI,EAAa,eAEtBL,EAAqB0B,EAAI3B,KAAME,EAEvC,IACC6B,OAAM,SAACvB,GACJD,EAAyBC,EAAON,EACpC,GACR,GYnBI,GAAG,CAACA,IAEJ,OAAKgB,EAMD,sBAAKiF,UAAU,MAAK,UAChB,cAAC2C,GAAa,IACd,cAACqC,EAAA,EAAM,CAACC,SAAS,SAAQ,SACrB,eAACC,GAAA,EAAG,WACA,eAACC,EAAA,EAAO,WACJ,cAAC3G,EAAA,EAAU,CAAC4G,KAAK,QAAQ3G,MAAM,UAAU,aAAW,OAAM,SACtD,cAAC4G,EAAA,EAAI,MAET,cAACC,EAAA,EAAU,CAACvH,QAAQ,KAAKwH,UAAU,MAAMlC,GAAI,CAACmC,SAAU,GAAG,kBAG1D9K,GAAc,cAAC0G,EAAA,EAAM,CAAC3C,MAAM,UAAUC,QAASqG,EAAc,wBAEtD,YAAXjK,GAAwB,cAAC2K,GAAA,EAAc,SAGhD,cAACC,EAAA,EAAS,CAACC,OAAK,WACZ,eAAC,KAAM,WACH,cAAC,KAAK,CAACC,KAAM,QAASC,QAAS,cAAC,GAAK,MACrC,cAAC,KAAK,CAACD,KAAM,IAAKC,QAAS,cAAC,GAAa,MACzC,cAAC,KAAK,CAACD,KAAM,IAAKC,QAAS,+DAzBhC,qBAAK3E,MAAO,CAAC+D,SAAU,WAAYa,IAAK,MAAOC,MAAO,OAAO,SAAC,cAACC,GAAA,EAAgB,KA8B9F,ECrDeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5K,MAAK,YAAkD,IAA/C6K,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,E,SCHAO,SACI,cAAC,IAAQ,CAAC5J,MAAOA,EAAM,SACnB,cAAC,KAAU,UACP,cAAC,GAAG,QAGZ6J,SAASC,eAAe,SAM5BV,I","file":"static/js/main.76c7a834.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e4310913-ee1d-4f45-afb2-bf32043c1264'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType<TodolistType>>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ login: string, email: string, id: string }>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppError, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AxiosError} from 'axios';\r\n\r\nexport const handelServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: AxiosError, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    console.log(error.message)\r\n    dispatch(setAppError(error ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatus('failed'))\r\n\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api';\r\nimport {SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handelServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState: authInitialStateType = {\r\n    isLoggedIn: false,\r\n}\r\n\r\nexport const authReducer = (state: authInitialStateType = initialState, action: ActionsType): authInitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, ...action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ActionCreators\r\n// export const loginAC = (userData: LoginParamsType) => ({type: 'AUTH/LOGIN', payload: {userData}} as const)\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', payload: {isLoggedIn}} as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type authInitialStateType = {\r\n    isLoggedIn: boolean\r\n    // userData: LoginParamsType\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\nimport {setIsLoggedIn} from '../features/Login/auth-reducer';\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null,\r\n    isInitialised: false\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n        case 'APP/SET-ERROR':\r\n        case 'APP/SET-IS-INITIALISED':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ActionCreators\r\nexport const setAppError = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', payload: {error: error}} as const\r\n}\r\nexport const setAppStatus = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', payload: {status: status}} as const\r\n}\r\nexport const setAppInitialised = (value: boolean) => {\r\n    return {type: 'APP/SET-IS-INITIALISED', payload: {isInitialised: value}} as const\r\n}\r\n\r\n// thunks\r\nexport const initialiseAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n            }\r\n            dispatch(setAppStatus('succeeded'))\r\n            dispatch(setAppInitialised(true))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialised: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type SetAppInitialisedActionType = ReturnType<typeof setAppInitialised>\r\n\r\ntype ActionsType = SetAppErrorActionType | SetAppStatusActionType | SetAppInitialisedActionType\r\n","import {AddTodolistActionType, RemoveTodolistActionType, setTodolistAC} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppError, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handelServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        case \"SET-TODOLISTS\" : {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateTaskDomaineModelType): UpdateTaskStatusActionType => {\r\n    return {type: 'UPDATE-TASK', model, todolistId, taskId}\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({type: 'SET-TASKS', todolistId, tasks}) as const\r\n\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n            dispatch(setAppStatus('succeeded'))\r\n        }).catch((error) => {\r\n        dispatch(setAppError(error.message))\r\n        dispatch(setAppStatus('failed'))\r\n    })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n// для примера написал санку на try/catch пока не буду удалять,\r\n// export const removeTaskTC = (todolistId:string, taskId:string) => async (dispatch: Dispatch) => {\r\n//     try{\r\n//         const response = await todolistsAPI.deleteTask(todolistId, taskId)\r\n//      if    (response.data.resultCode === 0 ) {\r\n//          dispatch(removeTaskAC(taskId, todolistId))\r\n//      }\r\n//     } catch (e) {\r\n//         console.log(e)\r\n//     } finally {\r\n//\r\n//     }\r\n// }\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handelServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTasksTC = (todolistId: string, taskId: string, domainModel: UpdateTaskDomaineModelType) => (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n    // тут беру метод find а не filter потому что нужно взять первое значение, filter пойдет до конца массива лишняя операция\r\n    if (task) {\r\n        todolistsAPI.updateTask(todolistId, taskId, {\r\n            ...task,\r\n            ...domainModel\r\n        })\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, res.data.data.item))\r\n                } else {\r\n                    handelServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // handleServerNetworkError(error, dispatch)\r\n                dispatch(setAppError(error.message))\r\n                dispatch(setAppStatus('failed'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\nexport type UpdateTaskStatusActionType = {\r\n    type: 'UPDATE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateTaskDomaineModelType\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\nexport type UpdateTaskDomaineModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | UpdateTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n\r\ntype ThunkDispatchType = Dispatch<ActionsType\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatus, SetAppStatusActionType} from '../../app/app-reducer';\r\nimport {handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newtodolist: TodolistDomainType = {...action.todolist, entityStatus: 'idle', filter: 'all'}\r\n            return [newtodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, entityStatus: 'idle', filter: 'all'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setTodolistAC = (todolists: TodolistType[]) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const createTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const changeTodoEntityStatusAC = (id: string, entityStatus: RequestStatusType): ChangeTodolistEntityStatusActionType => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus}\r\n}\r\n\r\n//thunks\r\nexport const fetchTodolists = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistAC(res.data))\r\n                dispatch(setAppStatus('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    dispatch(changeTodoEntityStatusAC(id, 'loading'))\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(id))\r\n                dispatch(setAppStatus('succeeded'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(createTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatus('succeeded'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type ChangeTodolistEntityStatusActionType = {\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>","import {tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {todolistsReducer} from '../features/Todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from './app-reducer';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// export const store = configureStore({\r\n//     reducer: rootReducer,\r\n//     middleware: (getDefaultMiddleware) =>\r\n//         getDefaultMiddleware()\r\n//             .prepend(\r\n//                 // correctly typed middlewares can just be used\r\n//                 additionalMiddleware,\r\n//                 // you can also type middlewares manually\r\n//                 untypedMiddleware as Middleware<\r\n//                     (action: Action<'specialAction'>) => number,\r\n//                     RootState\r\n//                     >\r\n//             )\r\n//             // prepend and concat calls can be chained\r\n//             .concat(logger),\r\n// })\r\n// })\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../components/Editablespan/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../components/Additemform/AddItemForm'\r\nimport {EditableSpan} from '../../components/Editablespan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from './todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\n// export const Todolist = React.memo(function ( TodoListPropsType) {\r\nexport const Todolist = React.memo(function ({\r\n                                                 todolist,\r\n                                                 removeTodolist,\r\n                                                 removeTask,\r\n                                                 tasks,\r\n                                                 addTask,\r\n                                                 changeTaskTitle,\r\n                                                 changeTodolistTitle,\r\n                                                 changeTaskStatus,\r\n                                                 changeFilter\r\n                                             }: TodoListPropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id)\r\n    }\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [dispatch, todolist.id])\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler} disabled={todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}\r\n                                                                    removeTask={removeTask}\r\n                                                                    changeTaskTitle={changeTaskTitle}\r\n                                                                    changeTaskStatus={changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppSelector} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    FilterValuesType,\r\n    fetchTodolists,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTasksTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemForm} from \"../../components/Additemform/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolists())\r\n    }, [isLoggedIn, dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, id));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTasksTC(todolistId, id, {status}));\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, title: string, todolistId: string) {\r\n        const thunk = updateTasksTC(todolistId, id, {title});\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = createTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolists.map(tl => {\r\n\r\n                let allTodolistTasks = tasks[tl.id];\r\n\r\n                return <Grid item key={tl.id}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <Todolist\r\n                            todolist={tl}\r\n                            tasks={allTodolistTasks}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import {forwardRef, SyntheticEvent} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppError} from '../../app/app-reducer';\r\n\r\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref,) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {email: 'Email is required'}\r\n            }\r\n\r\n            if (!values.password) {\r\n                return {password: 'Password is required'}\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                                             checked={formik.values.rememberMe}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}>\r\n                            Log in\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {TodolistsList} from \"../features/Todolists/TodolistsList\";\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {Box, CircularProgress, LinearProgress} from '@mui/material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useAppSelector} from './store';\r\nimport {Login} from '../features/Login/Login';\r\nimport {useDispatch} from 'react-redux';\r\nimport {initialiseAppTC} from './app-reducer';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useAppSelector(state => state.app.status)\r\n    const isInitialised = useAppSelector(state => state.app.isInitialised)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initialiseAppTC())\r\n    }, [dispatch])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch]);\r\n\r\n    if (!isInitialised) {\r\n        return <div style={{position: 'absolute', top: '30%', right: '50%'}}><CircularProgress/></div>\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Box>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </Box>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path={'*'} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport * as ReactDOM from \"react-dom\";\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}